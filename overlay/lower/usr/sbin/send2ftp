#!/bin/env sh

. /usr/share/common

show_help() {
	echo "Usage: $0 [options]
Where:
	-s host     FTP server FQDN or IP address.
	-p port     FTP server port.
	-d path     Directory on server, relative to FTP root.
	-f file     File to upload.
	-u username FTP username.
	-P password FTP password.
	-v          Verbose output.
	-V          If -f not specified, sends the video currently in vbuffer.
	-S          If -f not specified, sends the current camera snapshot.
	-h          Show this help.
" >&2
	exit 0
}

# Files to send
queue=""

cleanup() {
	for f in $queue; do
		[ -f "$f" ] && rm "$f"
	done
}

add_to_queue() {
	local ext="${1##*.}"
	local tempfile="$(mktemp -u).$ext"
	cp -f "$1" "$tempfile"
	queue="$queue $tempfile"
}

while getopts d:f:hp:P:s:Su:vV flag; do
	case "$flag" in
		d) ftp_path=$OPTARG ;;
		f) ftp_file=$OPTARG ;;
		p) ftp_port=$OPTARG ;;
		P) ftp_password=$OPTARG ;;
		s) ftp_host=$OPTARG ;;
		u) ftp_user=$OPTARG ;;
		v) verbose="true" ;;
		V) ftp_send_video="true" ;;
		S) ftp_send_snap="true" ;;
		h | *) show_help ;;
	esac
done

if [ -z "$ftp_host" ]; then
	echo_error "FTP host not found"
	cleanup
	exit 1
fi

if [ -z "$ftp_port" ]; then
	ftp_port=21
fi

if [ -z "$ftp_user" ]; then
	ftp_user="anonymous"
	ftp_password="anonymous"
fi

if [ -z "$ftp_file" ]; then
	if [ "true" = "$ftp_send_video" ]; then
		if [ ! -f "$VBUFFER_FILE" ]; then
			echo_error "Video buffer not found"
			cleanup
			exit 1
		fi

		inode=$(stat -c%i $VBUFFER_FILE)

		# Video preceeding the event
		add_to_queue "$VBUFFER_FILE"

		# Wait until the inode changes, meaning the video buffer file was recreated
		while [ $inode -eq $(stat -c%i $VBUFFER_FILE) ]; do
			n=$((n + 1))
			if [ "$n" -ge 10 ]; then
				echo_error "Give up after $n attempts."
				cleanup
				exit 1
			fi
			sleep 1
		done

		# Video following the event
		add_to_queue "$VBUFFER_FILE"
	fi

	if [ "true" = "$ftp_send_snap" ]; then
		tmpfile="$(mktemp -u).jpg"
		prudyntctl snapshot -c 0 > "$tmpfile"
		add_to_queue "$tmpfile"
	fi
else
	add_to_queue "$ftp_file"
fi

url="ftp://"
if [ -n "$ftp_user" ] && [ -n "$ftp_password" ]; then
	url="$url$ftp_user:$ftp_password"
fi
url="$url@$ftp_host:$ftp_port"
if [ -n "$ftp_path" ]; then
	url="$url/${ftp_path// /%20}"
fi

n=0
for local_file in $queue; do
	ext="${local_file##*.}"
	ftp_filename=$(date +"$ftp_template-$(printf %02d $n)").$ext
	final_url="$url/$ftp_filename"

	set -x
	if [ "true" = "$verbose" ]; then
		command="$CURL --verbose"
	else
		command="$CURL --silent"
	fi
	command="$command --url $final_url --upload-file $local_file --ftp-create-dirs"
	set +x

	if [ "true" = "$verbose" ]; then
		echo_command "$command"
	fi

	if ! sh -c "$command"; then
		echo_error "Failed to upload file to FTP server"
		cleanup
		exit 1
	fi

	n=$(($n + 1))
done

cleanup

exit 0
